// app.js

// Firebase Configuration (***‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á***)
const firebaseConfig = {
    apiKey: "AIzaSyCi2dw_qpuyj-hkwNc-meqX8wamKN0MrWE", 
    authDomain: "file-management-system-5eadd.firebaseapp.com",
    projectId: "file-management-system-5eadd",
    storageBucket: "file-management-system-5eadd.firebasestorage.app",
    messagingSenderId: "905827184615",
    appId: "1:905827184615:web:a5d290c78ffc51a85b5742"
};

// Global variables
let currentEmployee = null; 
let isAdmin = false; ¬† ¬† ¬† 
let withdrawalData = []; 
let employeeData = []; 
let db = null;
let firebaseInitialized = false;

// Local Storage Keys
const LS_USER_KEY = 'currentEmployee';
const LS_ADMIN_KEY = 'isAdmin';

// DOM Elements
const loginPage = document.getElementById('loginPage');
const withdrawalPage = document.getElementById('withdrawalPage');
const adminPage = document.getElementById('adminPage');
const loginForm = document.getElementById('loginForm');
const successModal = document.getElementById('successModal');
const connectionStatus = document.getElementById('connectionStatus');
const notification = document.getElementById('notification');
const manageEmployeesModal = document.getElementById('manageEmployeesModal');
const employeeListTable = document.getElementById('employeeListTable');

// üü¢ DOM Elements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
const currentWithdrawalDateSpan = document.getElementById('currentWithdrawalDate');
const displayCurrentWithdrawalDateSpan = document.getElementById('displayCurrentWithdrawalDate');
const editCurrentWithdrawalDateBtn = document.getElementById('editCurrentWithdrawalDateBtn');
const editDateModal = document.getElementById('editDateModal');
const closeDateModal = document.getElementById('closeDateModal');
const setDateForm = document.getElementById('setDateForm');
const newDateInput = document.getElementById('newDateInput');

// üî¥ DOM Elements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Custom Confirmation Modal (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô HTML)
const confirmationModal = document.getElementById('confirmationModal'); 
const confirmMessage = document.getElementById('confirmMessage'); 
const confirmActionBtn = document.getElementById('confirmActionBtn'); 
const cancelActionBtn = document.getElementById('cancelActionBtn');


// --- State Management (Local Storage) ---

function saveLoginState(userType, employeeDetails = null) {
    if (userType === 'admin') {
        localStorage.setItem(LS_ADMIN_KEY, 'true');
        localStorage.removeItem(LS_USER_KEY);
        isAdmin = true;
        currentEmployee = null;
    } else if (userType === 'employee' && employeeDetails) {
        localStorage.setItem(LS_USER_KEY, JSON.stringify(employeeDetails));
        localStorage.removeItem(LS_ADMIN_KEY);
        isAdmin = false;
        currentEmployee = employeeDetails;
    }
}

function clearLoginState() {
    localStorage.removeItem(LS_USER_KEY);
    localStorage.removeItem(LS_ADMIN_KEY);
    isAdmin = false;
    currentEmployee = null;
}

function loadLoginState() {
    const adminState = localStorage.getItem(LS_ADMIN_KEY);
    const employeeState = localStorage.getItem(LS_USER_KEY);

    if (adminState === 'true') {
        isAdmin = true;
        currentEmployee = null;
        return 'admin';
    } else if (employeeState) {
        try {
            currentEmployee = JSON.parse(employeeState);
            isAdmin = false;
            return 'employee';
        } catch (e) {
            console.error("Error parsing employee state:", e);
            clearLoginState();
        }
    }
    return 'none';
}


// --- Notification Functions ---

function showNotification(message, type = 'info') {
    let bgColor, icon;
    if (type === 'success') {
        bgColor = 'bg-success-500';
        icon = '‚úÖ';
    } else if (type === 'error') {
        bgColor = 'bg-red-500';
        icon = '‚ùå';
    } else {
        bgColor = 'bg-primary-500';
        icon = '‚ÑπÔ∏è';
    }

    notification.innerHTML = `
        <div class="${bgColor} text-white px-5 py-3 rounded-xl shadow-2xl flex items-center space-x-3 transform scale-100 opacity-100 transition-all duration-300">
          
        <span class="text-xl"></span>
            <span class="font-medium whitespace-nowrap">${message}</span>
        </div>
    `;
    notification.classList.remove('hidden');

    setTimeout(() => {
        notification.querySelector('div').classList.replace('opacity-100', 'opacity-0');
        notification.querySelector('div').classList.replace('scale-100', 'scale-95');
        setTimeout(() => {
            notification.classList.add('hidden');
        }, 300);
    }, 3000);
}

// üî¥ Custom Confirmation Modal Logic (New)
/**
 * ‡πÅ‡∏™‡∏î‡∏á Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
 * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Modal
 * @param {function} onConfirm - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (true/false)
 */
function showCustomConfirm(message, onConfirm) {
    if (!confirmationModal) {
        // Fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ Modal ‡πÉ‡∏ô HTML (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° HTML ‡πÅ‡∏•‡πâ‡∏ß)
        console.error("Confirmation modal DOM elements not found. Falling back to native confirm.");
        const result = window.confirm(message);
        onConfirm(result);
        return;
    }

    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Modal ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    confirmMessage.textContent = message;
    confirmationModal.classList.remove('hidden');
    
    // ‡πÉ‡∏™‡πà Animation ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î
    const modalContent = document.getElementById('confirmModalContent');
    modalContent.classList.remove('scale-95', 'opacity-0');
    modalContent.classList.add('scale-100', 'opacity-100');


    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Handler ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const handleConfirm = () => {
        // ‡∏•‡πâ‡∏≤‡∏á Event Listeners ‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏ô Modal
        confirmActionBtn.removeEventListener('click', handleConfirm);
        cancelActionBtn.removeEventListener('click', handleCancel);

        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');

        setTimeout(() => {
            confirmationModal.classList.add('hidden');
            onConfirm(true); // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        }, 300); // ‡∏£‡∏≠ animation ‡∏à‡∏ö
    };

    const handleCancel = () => {
        // ‡∏•‡πâ‡∏≤‡∏á Event Listeners ‡∏Å‡πà‡∏≠‡∏ô‡∏ã‡πà‡∏≠‡∏ô Modal
        confirmActionBtn.removeEventListener('click', handleConfirm);
        cancelActionBtn.removeEventListener('click', handleCancel);

        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
        
        setTimeout(() => {
            confirmationModal.classList.add('hidden');
            onConfirm(false); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        }, 300); // ‡∏£‡∏≠ animation ‡∏à‡∏ö
    };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listeners ‡πÉ‡∏´‡∏°‡πà
    confirmActionBtn.addEventListener('click', handleConfirm);
    cancelActionBtn.addEventListener('click', handleCancel);
}


// --- Firebase Initialization ---

async function initializeFirebase() {
    try {
        firebase.initializeApp(firebaseConfig);
        db = firebase.firestore();
        
        firebaseInitialized = true;
        updateConnectionStatus('connected');
        
        await initializeSampleData();
        await restoreSession(); 
        
    } catch (error) {
        console.error('Firebase initialization error:', error);
        updateConnectionStatus('error', error.message);
        showNotification('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ', 'error');
    }
}

function updateConnectionStatus(status, message = '') {
    const statusDiv = connectionStatus.querySelector('div');
    
    if (status === 'connected') {
        statusDiv.className = 'bg-success-500 text-white px-4 py-2 rounded-xl shadow-lg backdrop-blur-sm';
        statusDiv.innerHTML = '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        setTimeout(() => {
            connectionStatus.classList.add('opacity-0');
            setTimeout(() => connectionStatus.style.display = 'none', 300);
        }, 3000);
    } else if (status === 'error') {
        statusDiv.className = 'bg-red-500 text-white px-4 py-2 rounded-xl shadow-lg backdrop-blur-sm';
        statusDiv.innerHTML = '‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        connectionStatus.classList.remove('opacity-0');
        connectionStatus.style.display = 'block';
    }
}

async function initializeSampleData() {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
        const employeesSnapshot = await db.collection('employees').limit(1).get();
        if (employeesSnapshot.empty) {
             const sampleEmployees = [
                 { id: '001', name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', phone: '0929604003' },
                 { id: '002', name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô', phone: '0812345678' },
                 { id: '003', name: '‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡∏Ç‡∏¢‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', phone: '0987654321' }
             ];

             const batch = db.batch();
             sampleEmployees.forEach(emp => {
                 batch.set(db.collection('employees').doc(emp.id), emp);
             });
             await batch.commit();
        }
        
        // üü¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const settingsDoc = await db.collection('system').doc('settings').get();
        if (!settingsDoc.exists || !settingsDoc.data().currentWithdrawalDate) {
            // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 10 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY (‡∏û.‡∏®.)
            const today = new Date();
            let year = today.getFullYear();
            let month = today.getMonth() + 1; // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (0-11 -> 1-12)
            
            if (month > 11) {
                month = 0; // ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°
                year += 1; // ‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            }
            
            const targetDate = new Date(year, month, 10);
            const yearBE = targetDate.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
            // ‡∏î‡∏∂‡∏á month ‡πÅ‡∏•‡∏∞ day ‡∏à‡∏≤‡∏Å targetDate (‡∏ã‡∏∂‡πà‡∏á month ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0-11)
            const monthStr = String(targetDate.getMonth() + 1).padStart(2, '0'); // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô +1
            const dayStr = String(targetDate.getDate()).padStart(2, '0');
            
            // Format ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY (‡∏û.‡∏®.)
            const initialDateString = `${dayStr}/${monthStr}/${yearBE}`; 

            await db.collection('system').doc('settings').set({
                enabled: true,
                currentWithdrawalDate: initialDateString 
            }, { merge: true });
        }
    } catch (error) {
        console.error('Error initializing sample data:', error);
    }
}

async function restoreSession() {
    const userType = loadLoginState();
    
    if (userType === 'admin') {
        await showAdminPage();
    } else if (userType === 'employee') {
        await showWithdrawalPage();
    } else {
        loginPage.classList.remove('hidden');
        withdrawalPage.classList.add('hidden');
        adminPage.classList.add('hidden');
    }
}


// --- Utility Functions ---

/**
 * üü¢ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å Firestore
 * @returns {string} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY (‡∏û.‡∏®.) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
 */
async function loadCurrentWithdrawalDate() {
    try {
        const settingsDoc = await db.collection('system').doc('settings').get();
        const date = settingsDoc.exists ? settingsDoc.data().currentWithdrawalDate : null;
        
        const displayDate = date || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        if (currentWithdrawalDateSpan) {
            currentWithdrawalDateSpan.textContent = displayDate;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        if (displayCurrentWithdrawalDateSpan) {
            displayCurrentWithdrawalDateSpan.textContent = displayDate;
        }
        
        return date;

    } catch (error) {
        console.error('Error loading current withdrawal date:', error);
        if (currentWithdrawalDateSpan) currentWithdrawalDateSpan.textContent = '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!';
        if (displayCurrentWithdrawalDateSpan) displayCurrentWithdrawalDateSpan.textContent = '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!';
        return null;
    }
}


// --- Navigation and Logout ---

function logout() {
    clearLoginState();
    currentEmployee = null;
    isAdmin = false;
    withdrawalData = [];
    
    // Reset forms and view
    loginForm.reset();
    if (document.getElementById('withdrawAmount')) {
         document.getElementById('withdrawAmount').value = '';
    }
    
    loginPage.classList.remove('hidden');
    withdrawalPage.classList.add('hidden');
    adminPage.classList.add('hidden');
    
    document.getElementById('withdrawalForm').classList.remove('hidden');
    document.getElementById('alreadyWithdrawn').classList.add('hidden');
    showNotification('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'info');
}

// --- Employee/Admin Pages ---

async function showWithdrawalPage() {
    loginPage.classList.add('hidden');
    adminPage.classList.add('hidden');
    withdrawalPage.classList.remove('hidden');
    
    // üü¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    if (currentEmployee) {
        document.getElementById('employeeName').textContent = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì, ${currentEmployee.name}`;
    }
    
    // üü¢ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
    await loadCurrentWithdrawalDate(); 
    
    // Check if already withdrawn
    try {
        if (!currentEmployee) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏•‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        
        const withdrawalDoc = await db.collection('withdrawals').doc(currentEmployee.id).get();
        
        if (withdrawalDoc.exists) {
            const data = withdrawalDoc.data();
            
            document.getElementById('withdrawalForm').classList.add('hidden');
            document.getElementById('alreadyWithdrawn').classList.remove('hidden');
            document.getElementById('withdrawnAmount').textContent = `${data.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
            
            const dateText = currentWithdrawalDateSpan.textContent !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' ? 
                             ` (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${currentWithdrawalDateSpan.textContent})` : 
                             '';
            document.getElementById('alreadyWithdrawn').querySelector('p').textContent = 
                `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß${dateText}`;
            
        } else {
            document.getElementById('withdrawalForm').classList.remove('hidden');
            document.getElementById('alreadyWithdrawn').classList.add('hidden');
        }
    } catch (error) {
        console.error('Error checking withdrawal status:', error);
        showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô', 'error');
    }
}

async function refreshAdminData() {
    if (!isAdmin) return;
    
    await loadCurrentWithdrawalDate(); 
    await loadWithdrawalData();
    await loadSystemStatus();
    await loadEmployees();
    // showNotification('üîÑ Refresh ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'info');
}

async function showAdminPage() {
    loginPage.classList.add('hidden');
    withdrawalPage.classList.add('hidden');
    adminPage.classList.remove('hidden');
    
    await refreshAdminData(); 
}

// --- Login Logic ---

loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!firebaseInitialized) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô', 'info');
        return;
    }
    
    const employeeId = document.getElementById('employeeId').value.trim();
    const phoneNumber = document.getElementById('phoneNumber').value.trim();
    
    const loginButton = document.getElementById('loginButton');
    loginButton.disabled = true;
    loginButton.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...';
    
    try {
        // Admin check
        if (employeeId === 'admin' && phoneNumber === 'admin123') { // üí° ‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
            saveLoginState('admin'); 
            showAdminPage();
            showNotification('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
            return;
        }

        // System status check for employees
        const systemDoc = await db.collection('system').doc('settings').get();
        if (systemDoc.exists && !systemDoc.data().enabled) {
            showNotification('‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß üõë', 'error');
            return;
        }

        // Employee check
        const employeeDoc = await db.collection('employees').doc(employeeId).get();
        
        if (employeeDoc.exists) {
            const employeeData = employeeDoc.data();
            
            if (employeeData.phone === phoneNumber) {
                const employeeDetails = { id: employeeId, ...employeeData };
                saveLoginState('employee', employeeDetails); 
                showWithdrawalPage();
                showNotification(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, ${employeeDetails.name}`, 'success');
            } else {
                showNotification('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
            }
        } else {
            showNotification(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô "${employeeId}" ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`, 'error');
        }
    } catch (error) {
        console.error('Login error:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', 'error');
    } finally {
        loginButton.disabled = false;
        loginButton.textContent = '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
    }
});

// --- Employee Withdrawal Logic ---

document.getElementById('submitWithdrawal').addEventListener('click', async () => {
    const amount = parseInt(document.getElementById('withdrawAmount').value);
    
    if (!amount || amount <= 0) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        return;
    }
    
    // üü¢ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    const currentWithdrawalDate = currentWithdrawalDateSpan.textContent; 

    document.getElementById('submitWithdrawal').disabled = true;
    document.getElementById('submitWithdrawal').textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠...';

    try {
        const withdrawalDoc = await db.collection('withdrawals').doc(currentEmployee.id).get();
        if (withdrawalDoc.exists) {
            showNotification('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', 'error');
            document.getElementById('submitWithdrawal').disabled = false;
            document.getElementById('submitWithdrawal').textContent = '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô';
            return; 
        }
        
        // Save withdrawal data
        await db.collection('withdrawals').doc(currentEmployee.id).set({
            employeeId: currentEmployee.id,
            employeeName: currentEmployee.name,
            amount: amount,
            // üü¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠
            withdrawalDate: currentWithdrawalDate, 
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            displayDate: new Date().toLocaleDateString('th-TH', { 
                year: 'numeric', month: '2-digit', day: '2-digit', 
                hour: '2-digit', minute: '2-digit', second: '2-digit' 
            }) 
        });
        
        document.getElementById('submitWithdrawal').disabled = false;
        document.getElementById('submitWithdrawal').textContent = '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô';

        successModal.classList.remove('hidden');
    } catch (error) {
        console.error('Error submitting withdrawal:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
        document.getElementById('submitWithdrawal').disabled = false;
        document.getElementById('submitWithdrawal').textContent = '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô';
    }
});

document.getElementById('closeModal').addEventListener('click', () => {
    successModal.classList.add('hidden');
    showWithdrawalPage(); // Refresh to show "already withdrawn" state
});


// --- Admin Logic: System Controls ---

async function loadSystemStatus() {
    try {
        const systemDoc = await db.collection('system').doc('settings').get();
        const isEnabled = systemDoc.exists ? systemDoc.data().enabled : true;
        
        const statusElement = document.getElementById('systemStatus');
        const toggleButton = document.getElementById('toggleSystem');
        
        if (isEnabled) {
            statusElement.textContent = 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö';
            statusElement.className = 'text-lg font-bold text-success-600';
            toggleButton.textContent = 'ON'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∑‡∏≠ '‡πÄ‡∏õ‡∏¥‡∏î'
            toggleButton.className = 'px-5 py-2 rounded-lg text-sm font-semibold transition-colors shadow-md bg-success-500 text-white hover:bg-red-600';
        } else {
            statusElement.textContent = 'üî¥ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö';
            statusElement.className = 'text-lg font-bold text-red-600';
            toggleButton.textContent = 'OFF'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö' ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∑‡∏≠ '‡∏õ‡∏¥‡∏î'
            toggleButton.className = 'px-5 py-2 rounded-lg text-sm font-semibold transition-colors shadow-md bg-red-500 text-white hover:bg-success-600';
        }
    } catch (error) {
        console.error('Error loading system status:', error);
    }
}

document.getElementById('toggleSystem').addEventListener('click', async () => {
    try {
        const systemDoc = await db.collection('system').doc('settings').get();
        const currentStatus = systemDoc.exists ? systemDoc.data().enabled : true;
        const newStatus = !currentStatus;
        
        await db.collection('system').doc('settings').set({
            enabled: newStatus,
            lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
        }, { merge: true });
        
        await loadSystemStatus();
        
        const message = newStatus ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
        showNotification(message, 'success');
    } catch (error) {
        console.error('Error toggling system status:', error);
        showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö', 'error');
    }
});

document.getElementById('resetWithdrawals').addEventListener('click', async () => {
    // üî¥ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà confirm ‡∏î‡πâ‡∏ß‡∏¢ Custom Modal
    const message = '‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ)';

    showCustomConfirm(message, async (confirmed) => {
        if (!confirmed) {
            showNotification('‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'info');
            return;
        }
        
        try {
            const withdrawalsSnapshot = await db.collection('withdrawals').get();
            const batch = db.batch();
            withdrawalsSnapshot.forEach(doc => {
                batch.delete(doc.ref);
            });
            
            await batch.commit();
            
            await loadWithdrawalData();
            showNotification('‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        } catch (error) {
            console.error('Error resetting withdrawals:', error);
            showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
        }
    });
});


// --- Admin Logic: Withdrawal Data & Delete ---

async function loadWithdrawalData() {
    const tableBody = document.getElementById('withdrawalTable');
    tableBody.innerHTML = `<tr><td colspan="6" class="px-4 py-8 text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td></tr>`; 

    try {
        const withdrawalsSnapshot = await db.collection('withdrawals').orderBy('timestamp', 'desc').get();
        withdrawalData = [];
        let totalAmount = 0;
        let tableHTML = '';
        
        withdrawalsSnapshot.forEach(doc => {
            const data = doc.data();
            const docId = doc.id;
            withdrawalData.push(data);
            totalAmount += data.amount;
            
            const displayWithdrawalDate = data.withdrawalDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            const displaySubmissionDate = data.displayDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'; 
            
            tableHTML += `
                <tr class="hover:bg-gray-50" data-id="${docId}">
                    <td class="px-4 py-3">${data.employeeId}</td>
                    <td class="px-4 py-3">${data.employeeName}</td>
                    <td class="px-4 py-3 text-right font-mono text-lg text-success-700">${data.amount.toLocaleString()}</td>
                    
                    <td class="px-4 py-3 text-sm font-semibold text-primary-600">${displayWithdrawalDate}</td> 
                    
                    <td class="px-4 py-3 text-sm text-gray-600">${displaySubmissionDate}</td>
                    
                    <td class="px-4 py-3 text-center">
                        <button class="delete-withdrawal-btn text-red-500 hover:text-red-700 font-medium" data-id="${docId}">‡∏•‡∏ö</button>
                    </td>
                </tr>
            `;
        });
        
        tableBody.innerHTML = tableHTML || `
            <tr>
                <td colspan="6" class="px-4 py-8 text-center text-gray-500">
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
                </td>
            </tr>
        `;
        
        document.getElementById('totalAmount').textContent = `‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        document.getElementById('withdrawnCount').textContent = withdrawalData.length.toString();
        document.getElementById('totalAmountSummary').textContent = `${totalAmount.toLocaleString()} ‡∏ø`;

    } catch (error) {
        console.error('Error loading withdrawal data:', error);
        tableBody.innerHTML = `<tr><td colspan="6" class="px-4 py-8 text-center text-red-500">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>`;
        showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô', 'error');
    }
}

// Event listener for Delete button on Admin Withdrawal Table
document.getElementById('withdrawalTable').addEventListener('click', async (e) => {
    const docId = e.target.dataset.id;
    if (!docId) return;
    
    // üî¥ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà confirm
    if (e.target.classList.contains('delete-withdrawal-btn')) {
        
        showCustomConfirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${docId} ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`, async (confirmed) => {
            if (!confirmed) {
                showNotification('‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'info');
                return;
            }
            
            try {
                await db.collection('withdrawals').doc(docId).delete();
                await loadWithdrawalData();
                showNotification(`üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á ID: ${docId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
                
                // ‡∏´‡∏≤‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô ‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
                if (currentEmployee && currentEmployee.id === docId) {
                    showWithdrawalPage(); 
                }
            } catch (error) {
                console.error('Error deleting withdrawal:', error);
                showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô', 'error');
            }
        });
    }
});


// --- üü¢ Admin Logic: Set Current Withdrawal Date ---

editCurrentWithdrawalDateBtn.addEventListener('click', async () => {
    const currentDate = await loadCurrentWithdrawalDate();
    
    // ‡πÅ‡∏õ‡∏•‡∏á DD/MM/YYYY (‡∏û.‡∏®.) ‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD (‡∏Ñ.‡∏®.) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏™‡πà‡πÉ‡∏ô input type="date"
    let isoDate = '';
    if (currentDate && currentDate !== '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏') {
        const parts = currentDate.split('/');
        if (parts.length === 3) {
            const [day, month, year] = parts;
            // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            const yearAD = parseInt(year) < 2500 ? parseInt(year) : parseInt(year) - 543; 
            isoDate = `${yearAD}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        }
    }

    newDateInput.value = isoDate;
    editDateModal.classList.remove('hidden');
    // Animation
    setTimeout(() => {
        document.getElementById('dateModalContent').classList.replace('scale-95', 'scale-100');
        document.getElementById('dateModalContent').classList.replace('opacity-0', 'opacity-100');
    }, 50);
});

closeDateModal.addEventListener('click', () => {
    document.getElementById('dateModalContent').classList.replace('scale-100', 'scale-95');
    document.getElementById('dateModalContent').classList.replace('opacity-100', 'opacity-0');
    setTimeout(() => {
        editDateModal.classList.add('hidden');
    }, 300);
});

setDateForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const isoDate = newDateInput.value; // YYYY-MM-DD (‡∏Ñ.‡∏®.)
    
    if (!isoDate) {
        return showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'error');
    }
    
    // ‡πÅ‡∏õ‡∏•‡∏á YYYY-MM-DD (‡∏Ñ.‡∏®.) ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY (‡∏û.‡∏®.)
    const [year, month, day] = isoDate.split('-');
    const yearBE = parseInt(year) + 543;
    const formattedDate = `${day}/${month}/${yearBE}`;

    try {
        await db.collection('system').doc('settings').update({
            currentWithdrawalDate: formattedDate,
            lastModified: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        closeDateModal.click(); // ‡∏õ‡∏¥‡∏î Modal
        showNotification(`‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≠‡∏ö‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô ${formattedDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
        
        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (currentEmployee) {
             await showWithdrawalPage(); 
        } else {
             await loadCurrentWithdrawalDate();
        }

    } catch (error) {
        console.error('Error setting withdrawal date:', error);
        showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'error');
    }
});


// --- Admin Logic: Employee Management & Excel Download (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ confirm/prompt) ---

async function loadEmployees() {
    employeeListTable.innerHTML = `<tr><td colspan="4" class="text-center py-4 text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</td></tr>`;
    try {
        const employeesSnapshot = await db.collection('employees').orderBy('id').get();
        employeeData = [];
        let tableHTML = '';
        
        employeesSnapshot.forEach(doc => {
            const emp = { id: doc.id, ...doc.data() };
            employeeData.push(emp);
            
            tableHTML += `
                <tr class="hover:bg-gray-50 transition-colors" data-id="${emp.id}">
                    <td class="px-4 py-3 text-sm font-semibold">${emp.id}</td>
                    <td class="px-4 py-3">${emp.name}</td>
                    <td class="px-4 py-3">${emp.phone}</td>
                    <td class="px-4 py-3 text-center">
                        <button class="delete-btn text-red-500 hover:text-red-700 font-medium" data-id="${emp.id}">‡∏•‡∏ö</button>
                    </td>
                </tr>
            `;
        });

        employeeListTable.innerHTML = tableHTML || `<tr><td colspan="4" class="text-center py-4 text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</td></tr>`;
        
    } catch (error) {
        console.error('Error loading employees:', error);
        showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'error');
    }
}

document.getElementById('addEmployeeForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const id = document.getElementById('newEmpId').value.trim();
    const name = document.getElementById('newEmpName').value.trim();
    const phone = document.getElementById('newEmpPhone').value.trim();

    if (!id || !name || !phone) return showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');

    try {
        const docRef = db.collection('employees').doc(id);
        const doc = await docRef.get();
        if (doc.exists) {
            return showNotification(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${id} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`, 'error');
        }

        await docRef.set({ id, name, phone });
        
        document.getElementById('addEmployeeForm').reset();
        await loadEmployees(); 
        showNotification(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${name} (ID: ${id}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');

    } catch (error) {
        console.error('Error adding employee:', error);
        showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'error');
    }
});

employeeListTable.addEventListener('click', async (e) => {
    const id = e.target.dataset.id;
    if (!id) return;
    
    if (e.target.classList.contains('delete-btn')) {
        // üî¥ ‡πÉ‡∏ä‡πâ Custom Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
        const message = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id} ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`;

        showCustomConfirm(message, async (confirmed) => {
            if (!confirmed) {
                showNotification('‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'info');
                return;
            }

            try {
                await db.collection('employees').doc(id).delete();
                await loadEmployees();
                showNotification(`üóëÔ∏è ‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
            } catch (error) {
                console.error('Error deleting employee:', error);
                showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'error');
            }
        });

    } 
    
    else if (e.target.classList.contains('edit-btn')) {
        const emp = employeeData.find(e => e.id === id);
        if (!emp) return;

        // ‡πÉ‡∏ä‡πâ prompt() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô)
        const newName = prompt(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID ${id}:`, emp.name);
        if (newName === null) return showNotification('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', 'info'); 
        
        const newPhone = prompt(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ID ${id}:`, emp.phone);
        if (newPhone === null) return showNotification('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', 'info'); 

        if (newName.trim() === '' || newPhone.trim() === '') {
            return showNotification('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        }

        try {
            await db.collection('employees').doc(id).update({ name: newName.trim(), phone: newPhone.trim() });
            await loadEmployees();
            showNotification(`‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ID: ${id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
        } catch (error) {
            console.error('Error editing employee:', error);
            showNotification('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'error');
        }
    }
});

document.getElementById('manageEmployeesBtn').addEventListener('click', () => {
    loadEmployees(); 
    manageEmployeesModal.classList.remove('hidden');
});

document.getElementById('closeManageEmployeesModal').addEventListener('click', () => {
    manageEmployeesModal.classList.add('hidden');
});

document.getElementById('downloadExcel').addEventListener('click', () => {
    if (withdrawalData.length === 0) {
        showNotification('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î', 'info');
        return;
    }
    
    const excelData = withdrawalData.map(withdrawal => ({
        '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô': withdrawal.employeeId,
        '‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô': withdrawal.employeeName,
        '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô': withdrawal.amount,
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å (‡∏£‡∏≠‡∏ö)': withdrawal.withdrawalDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        '‡πÄ‡∏ß‡∏•‡∏≤‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠': withdrawal.displayDate || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    }));
    
    // Check for XLSX library existence (must be included in HTML)
    if (typeof XLSX === 'undefined') {
        showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ XLSX (SheetJS)', 'error');
        return;
    }

    const ws = XLSX.utils.json_to_sheet(excelData);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô');
    
    const fileName = `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏á‡∏¥‡∏ô_${new Date().toLocaleDateString('th-TH').replace(/[/]/g, '-')}.xlsx`;
    XLSX.writeFile(wb, fileName);

    showNotification('üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel', 'info');
});


// --- Event Listeners Setup ---

document.getElementById('logoutBtn').addEventListener('click', logout);
document.getElementById('adminLogout').addEventListener('click', logout);

if (document.getElementById('refreshAdminData')) {
    document.getElementById('refreshAdminData').addEventListener('click', refreshAdminData);
}


// --- Initialize App ---
initializeFirebase();